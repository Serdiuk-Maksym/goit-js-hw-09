{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAyBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEM,SAAAT,EAAUU,MAAAT,IAEpBG,EAAO,CAAEK,SAAAT,EAAUU,MAAAT,G,GAEpBA,E,IAEFU,MAAK,SAAAC,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MACjBG,EAAAhB,GAASiB,OAAOC,QAAQ,uBAAwCC,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,IAEvEO,OAAM,SAAAL,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MAClBG,EAAAhB,GAASiB,OAAOI,QAAQ,sBAAqCF,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,IAvC5DS,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAaN,IAXA,IAAMC,EAAcL,SAASC,cAAc,wBACrCK,EAAaN,SAASC,cAAc,uBACpCM,EAAYP,SAASC,cAAc,sBAEnCO,EAASC,SAASJ,EAAYK,OAC9BnB,EAAQkB,SAASH,EAAWI,OAC5BC,EAAOF,SAASF,EAAUG,OAE5BE,EAAerB,EAGVD,EAAW,EAAGA,GAAYkB,EAAQlB,IACzCV,EAAcU,EAAUsB,GACxBA,GAAgBD,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault(); // Prevent form submission\n\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n\n  const amount = parseInt(amountInput.value);\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n\n  let currentDelay = delay; // Declare a new variable to store the current delay\n\n  // Call createPromise for each promise position\n  for (let position = 1; position <= amount; position++) {\n    createPromise(position, currentDelay);\n    currentDelay += step; // Update the current delay\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  })\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position1","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","position","delay","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","document","querySelector","addEventListener","event","preventDefault","amountInput","delayInput","stepInput","amount","parseInt","value","step","currentDelay"],"version":3,"file":"03-promises.3d5d0c8b.js.map"}